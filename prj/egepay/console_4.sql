create table egepayw.auth_user_role_map
(
	user_id bigint
		constraint unq_auth_user_role_map_user_id
			unique,
	role_id bigint
		constraint unq_auth_user_role_map_role_id
			unique,
	id bigint generated by default as identity
		constraint pk_auth_user_role_map_id
			primary key,
	insert_date date default CURRENT_DATE
);

alter table egepayw.auth_user_role_map owner to postgres;

create table egepayw.auth_role_permission_map
(
	id bigint generated always as identity
		constraint pk_auth_role_permission_id
			primary key,
	role_id bigint
		constraint unq_auth_role_permission_role_id
			unique,
	permission_id bigint
		constraint unq_auth_role_permission_permission_id
			unique
);

alter table egepayw.auth_role_permission_map owner to postgres;

create table egepayw.auth_permission
(
	id bigint generated by default as identity
		constraint pk_auth_permission_id
			primary key
		constraint fk_auth_permission_auth_role_permission
			references egepayw.auth_role_permission_map (permission_id),
	code varchar(20),
	name varchar(100),
	description varchar(1000),
	insert_date date
);

comment on table egepayw.auth_permission is 'permission grup veya modül grupları ve  crud +call şeklinde türlere göre yönetilebilir  şekide izinler bölünmeye çalışılacak. Yazılımın mimarisine göre  tercih değişebilir.\n Şimdilik dursun';

alter table egepayw.auth_permission owner to postgres;

create table egepayw.auth_group_role_map
(
	id bigint generated always as identity
		constraint pk_auth_group_role_map_id
			primary key,
	group_id bigint
		constraint unq_auth_group_role_map_user_group_id
			unique,
	role_id bigint
		constraint unq_auth_group_role_map_role_id
			unique
);

alter table egepayw.auth_group_role_map owner to postgres;

create table egepayw.auth_role
(
	id bigint not null
		constraint pk_auth_role_id
			primary key
		constraint fk_auth_role_auth_group_role_map
			references egepayw.auth_group_role_map (role_id)
		constraint fk_auth_role_auth_role_permission
			references egepayw.auth_role_permission_map (role_id)
		constraint fk_auth_role_auth_user_role_map
			references egepayw.auth_user_role_map (role_id),
	name varchar(100),
	description varchar(200),
	status smallint,
	insert_date date
);

alter table egepayw.auth_role owner to postgres;

create table egepayw.auth_user_group_map
(
	id bigint generated always as identity
		constraint pk_auth_user_group_map_id
			primary key,
	user_id bigint
		constraint unq_auth_user_group_map_user_id
			unique,
	group_id bigint
		constraint unq_auth_user_group_map_group_id
			unique
);

alter table egepayw.auth_user_group_map owner to postgres;

create table egepayw.auth_user
(
	id bigint generated always as identity
		constraint pk_app_user_id
			primary key
		constraint fk_auth_user_auth_user_group_map
			references egepayw.auth_user_group_map (user_id)
		constraint fk_auth_user_auth_user_role_map
			references egepayw.auth_user_role_map (user_id),
	username varchar(50),
	passwd varchar(100),
	email varchar(100),
	name varchar(100),
	surname varchar(100),
	status smallint,
	insert_date date,
	last_access_date date,
	user_type varchar(10)
);

alter table egepayw.auth_user owner to postgres;

create table egepayw.auth_group
(
	id bigint generated always as identity
		constraint pk_auth_user_group_id
			primary key
		constraint fk_auth_group_auth_user_group_map
			references egepayw.auth_user_group_map (group_id)
		constraint fk_auth_user_group_auth_group_role_map
			references egepayw.auth_group_role_map (group_id),
	name varchar(100),
	description varchar(500)
);

alter table egepayw.auth_group owner to postgres;

create table egepayw.auth_user_session
(
	id bigint,
	channel bigint,
	ip varchar(30),
	start_date timestamp default CURRENT_TIMESTAMP,
	end_date timestamp
);

alter table egepayw.auth_user_session owner to postgres;

